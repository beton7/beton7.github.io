<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog Beton7]]></title>
  <link href="http://beton7.github.io/atom.xml" rel="self"/>
  <link href="http://beton7.github.io/"/>
  <updated>2015-01-26T22:37:06+07:00</updated>
  <id>http://beton7.github.io/</id>
  <author>
    <name><![CDATA[beton7]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Desain Pattern]]></title>
    <link href="http://beton7.github.io/blog/2015/01/26/desain-pattern/"/>
    <updated>2015-01-26T22:20:28+07:00</updated>
    <id>http://beton7.github.io/blog/2015/01/26/desain-pattern</id>
    <content type="html"><![CDATA[<p><strong>Pola desain</strong> atau pola rancangan (bahasa Inggris: <strong>design pattern</strong>) adalah sebuah istilah di dalam rekayasa perangkat lunak yang mengacu pada solusi umum yang bisa dipergunakan kembali atau berulang-ulang untuk menyelesaikan masalah-masalah yang umum terjadi dalam konteks tertentu atau khusus yang ditemui pada desain perangkat lunak. Sebuah pola desain yang sudah terbentuk bukan berarti desain tersebut dapat langsung digunakan untuk menulis program.</p>

<p>Pola desain dapat di analogikan sebagai sebuah resep makanan yang dapat digunakan untuk membuat makanan, namun pada kenyataannya selera orang berbeda-beda sehingga untuk menggunkan resep tersebut agar menghasilkan makanan yang enak dan sesuai harus dilakukan penyesuaian dengan kebutuhan dan keadaan. Pola yang sudah dibangun diformulasikan sedemikian rupa untuk menemukan cara terbaik memecahkan masalah, namun tetap saja programmer harus menerapkan pola tersebut dengan pendekatan yang sesuai dengan konteks masalah yang sedang dialami, dengan penyesuaian terhadap kebutuhan.</p>

<p>Ada banyak jenis pola desain. Contohnya :</p>

<ul>
  <li>
    <p>Pola Strategi Algoritma yang menangani masalah yang berkaitan dengan strategi tingkat tinggi yang menggambarkan bagaimana memanfaatkan karakteristik aplikasi pada platform komputasi.</p>
  </li>
  <li>
    <p>Pola Desain Komputasi menangani masalah yang berkaitan dengan identifikasi perhitungan kunci atau id.</p>
  </li>
  <li>
    <p>Pola Eksekusi berkaitan dengan hal-hal yang mendukung proses eksekusi aplikasi, termasuk strategi untuk melaksanakan alur tugas dan blok bangunan untuk mendukung tugas sinkronisasi.</p>
  </li>
  <li>
    <p>Pola Strategi Implementasi menangani masalah terkait dengan pelaksanaan kode untuk mendukung organisasi program dan struktur data umum khusus untuk pemrograman paralel.</p>
  </li>
  <li>
    <p>Pola Desain Struktural menangani masalah yang berkaitan dengan struktur tingkat tinggi aplikasi yang dikembangkan.</p>
  </li>
</ul>

<h3 id="sejarah">Sejarah</h3>
<p>Pola pertama kali digunakan sebagai konsep arsitektur oleh Christopher Alexander ( 1977-1979 ) . Pada tahun 1987 , Kent Beck dan Ward Cunningham mulai bereksperimen dengan ide menerapkan pola pemrograman dan mempresentasikan hasil mereka pada konferensi OOPSLA tahun itu. Dalam tahun-tahun berikutnya, Beck, Cunningham dan lain-lain melanjutkan pekerjaan ini.</p>

<p>Desain pola mendapatkan popularitas dalam ilmu komputer setelah buku Design Pattern: Elements of Reusable Object-Oriented Software diterbitkan pada tahun 1994 oleh apa yang disebut “Gang of Four “ ( Gamma et al . ), yang sering disingkat sebagai “GOF”. Pada tahun yang sama, Konferensi Pertama Pola Bahasa Pemrograman diadakan dan tahun berikutnya, Portland Pattern Repository didirikan untuk dokumentasi pola desain.</p>

<p>Buku refrensi penting dalam pola desain meliputi:</p>

<ul>
  <li>
    <p>Gamma, Erich; Richard Helm, Ralph Johnson, and John Vlissides (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2.</p>
  </li>
  <li>
    <p>Buschmann, Frank; Regine Meunier, Hans Rohnert, Peter Sommerlad (1996). Pattern-Oriented Software Architecture, Volume 1: A System of Patterns. John Wiley &amp; Sons. ISBN 0-471-95869-7.</p>
  </li>
  <li>
    <p>Schmidt, Douglas C.; Michael Stal, Hans Rohnert, Frank Buschmann (2000). Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects. John Wiley &amp; Sons. ISBN 0-471-60695-2. Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBN 978-0-321-12742-6.</p>
  </li>
  <li>
    <p>Hohpe, Gregor; Bobby Woolf (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley. ISBN 0-321-20068-3.</p>
  </li>
  <li>
    <p>Freeman, Eric T; Elisabeth Robson, Bert Bates, Kathy Sierra (2004). Head First Design Patterns. O’Reilly Media. ISBN 0-596-00712-4.</p>
  </li>
</ul>

<p>Meskipun pola desain telah diterapkan praktis untuk waktu yang lama , formalisasi konsep pola desain mendekam selama beberapa tahun .
<br />
Sumber : <a href="http://id.wikipedia.org/wiki/Pola_desain">wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apa itu ORM ?]]></title>
    <link href="http://beton7.github.io/blog/2015/01/26/apa-itu-orm/"/>
    <updated>2015-01-26T22:20:14+07:00</updated>
    <id>http://beton7.github.io/blog/2015/01/26/apa-itu-orm</id>
    <content type="html"><![CDATA[<p><strong>Pemetaan objek-relasional</strong>(object-relational mapping atau O/RM) merupakan sebuah teknik yang digunakan dalam pemrograman untuk menggunakan basisdata relasional sebagai penyimpanan data dengan bentuk obyek. Teknik ini biasa digunakan dalam bahasa pemrograman berorientasi objek saat harus menggunakan basisdata relasional dalam penyimpanannya.</p>

<h3 id="masalah">Masalah</h3>
<p>Pemrograman berorientasi obyek menggunakan cara pandang obyek dalam dunia nyata untuk melihat sistem. Contoh: seorang Manusia mempunyai atribut yang melekat pada dirinya berupa nama, alamat, tanggal lahir, dan sebagainya. Mahasiswa merupakan manusia, maka Mahasiswa mewarisi semua sifat manusia.</p>

<p>Dalam penyimpanannya ke dalam basisdata, penurunan sifat maupun hubungan antar objek daat menjadi masalah tersendiri. Apalagi sebuah objek mendukung aksi(method) akan tetapi tidak dengan basis data.</p>

<h3 id="pemecahan">Pemecahan</h3>
<p>Bahasa pemrograman menggunakan O/RM untuk memetakan objek ke dalam database. Objek yang kita masukkan akan dibaca oleh O/RM tersebut kemudian diubah ke dalam Sintaks SQL. Selanjutnya baru kemudian dijalankan di basisdata relasional dan hasilnya kembali ke O/RM.
<br />
Sumber : <a href="http://id.wikipedia.org/wiki/Pemetaan_objek-relasional">wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengenal Konsep MVC]]></title>
    <link href="http://beton7.github.io/blog/2015/01/26/mengenal-konsep-mvc/"/>
    <updated>2015-01-26T22:19:46+07:00</updated>
    <id>http://beton7.github.io/blog/2015/01/26/mengenal-konsep-mvc</id>
    <content type="html"><![CDATA[<p><strong>Model-View-Controller</strong> atau <strong>MVC</strong> adalah sebuah metode untuk membuat sebuah aplikasi dengan memisahkan data (Model) dari tampilan (View) dan cara bagaimana memprosesnya (Controller). </p>

<p>Dalam implementasinya kebanyakan framework dalam aplikasi website adalah berbasis arsitektur MVC. MVC memisahkan pengembangan aplikasi berdasarkan komponen utama yang membangun sebuah aplikasi seperti manipulasi data, antarmuka pengguna, dan bagian yang menjadi kontrol dalam sebuah aplikasi web.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b5/ModelViewControllerDiagram2.svg" /></p>

<h3 id="sejarah">Sejarah</h3>
<p>Model View Controller pertama sekali dipublikasikan oleh peneliti XEROX PARC yang bekerja dalam pembuatan bahasa pemrograman Smalltalk sekitar tahun 1970-1980.</p>

<h3 id="bagian-dari-mvc">Bagian dari MVC</h3>

<ul>
  <li>Model, Model mewakili struktur data. Biasanya model berisi fungsi-fungsi yang membantu seseorang dalam pengelolaan basis data seperti memasukkan data ke basis data, pembaruan data dan lain-lain.</li>
  <li>View, View adalah bagian yang mengatur tampilan ke pengguna. Bisa di katakan berupa halaman web.</li>
  <li>Controller, Controller merupakan bagian yang menjembatani model dan view. Controller berisi perintah-perintah yang berfungsi untuk memproses suatu data dan mengirimkannya ke halaman web.</li>
</ul>

<p>Dengan menggunakan metode MVC maka aplikasi akan lebih mudah untuk dirawat dan dikembangkan. Untuk memahami metode pengembangan aplikasi menggunakan MVC diperlukan pengetahuan tentang pemrograman berorientasi objek (Object Oriented Programming).</p>

<h3 id="jenis-mvc-pada-website">Jenis MVC pada website</h3>

<ul>
  <li>Server Side MVC, Server Side MVC biasa terjadi pada aplikasi web tradisional, yang tidak melibatkan client side seperti Javascript, Java applet, Flash, dan lain-lain. Server Side MVC menyerahkan keseluruhan proses bisnis pada server, aplikasi pada sisi pengguna hanya dapat menerima. MVC jenis ini kadang-kadang disebut juga dengan nama Thin Client.</li>
  <li>Mixed Client Side and Server Side MVC, Pada Mixed Client Side and Server Side MVC 1 client tidak menggunakan model sebagai jembatan untuk melakukan komunikasi pada server, dibandingkan dengan Server Side MVC, arsitektur ini memiliki tingkat kompleksitas yang lebih tinggi karena lebih banyak komponen yang terlibat. Untuk selanjutnya arsitektur ini disebut, dengan Mixed MVC 1. Pada Mixed Client Side and Server Side MVC 2, client menggunakan model sebagai jembatan untuk melakukan komunikasi pada server, dibandingkan dengan arsitektur MVC yang lain, arsitektur ini memiliki tingkat kompleksitas yang paling tinggi karena lebih banyak komponen yang terlibat, sehingga membutuhkan sumber daya yang lebih besar pula. Untuk selanjutnya arsitektur ini disebut dengan Mixed MVC 2.</li>
  <li>Rich Internet Application MVC, Application MVC Rich Internet Application (RIA) disebut juga dengan nama Fat Client, merupakan aplikasi web yang memiliki kemampuan dan fungsi hampir seperti aplikasi desktop. RIA pada sisi client, memiliki mesin untuk mengambil data yang berada pada server, sehingga pada client terdapat bagian MVC sendiri dan hanya membutuhkan bagian model pada sisi server.
<br />
Sumber : <a href="http://id.wikipedia.org/wiki/MVC">wikipedia</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
